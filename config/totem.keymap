//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_at {
            bindings = <&kp AT_SIGN>;
            key-positions = <1 2>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <2 3>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <3 4>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_quotedouble {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <10 11>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_percent {
            bindings = <&kp PERCENT>;
            key-positions = <5 6>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <6 7>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <7 8>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <8 9>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_return {
            bindings = <&kp RET>;
            key-positions = <19 31>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <31 30>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <19 18>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <20 10>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <4 5>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <21 22>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <100>;
        };

        combo_multiply {
            bindings = <&kp ASTERISK>;
            key-positions = <2 13>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <1>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <2 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <1>;
        };

        combo_divide {
            bindings = <&kp SLASH>;
            key-positions = <3 12>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <1>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <12 13>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <1>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <12 11>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <1>;
        };

        combo_comma {
            bindings = <&kp COMMA>;
            key-positions = <23 24>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <1>;
        };

        combo_dot {
            bindings = <&kp PERIOD>;
            key-positions = <23 22>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <1>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <13 11>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <1>;
        };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp G &kp I &kp F>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <130>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
            &kp Q       &kp W       &kp E         &kp R        &kp T        &kp Y        &kp U        &kp I            &kp O       &kp P
            &hm LGUI A  &hm LALT S  &hm LSHIFT D  &hm LCTRL F  &kp G        &kp H        &hm LCTRL J  &hm LSHIFT K     &hm LALT L  &hm RGUI SEMICOLON
&kp LSHIFT  &kp Z       &kp X       &kp C         &kp V        &kp B        &kp N        &hm RALT M   &hm RCTRL COMMA  &kp DOT     &kp FSLH            &kp RSHIFT
                                    &lt 1 ESC     &lt 2 SPACE  &lt 3 TAB    &lt 1 ENTER  &lt 2 BSPC   &lt 3 DEL
            >;
        };

        num_layer {
            bindings = <
            &kp LEFT_BRACKET  &kp N7       &kp N8         &kp N9        &kp RIGHT_BRACKET    &kp PLUS      &kp F8        &kp F8         &kp F9       &kp F12
            &hm LWIN SQT      &hm LALT N4  &hm LSHIFT N5  &hm LCTRL N6  &kp EQUAL            &kp MINUS     &hm LCTRL F4  &hm LSHIFT F5  &hm LALT F6  &hm RWIN F11
&kp LSHIFT  &kp GRAVE         &kp N1       &kp N2         &kp N3        &kp BACKSLASH        &kp ASTERISK  &kp F1        &kp F2         &kp F3       &kp F10       &kp RSHIFT
                                           &kp PERIOD     &kp N0        &kp MINUS            &trans        &kp SLASH     &trans
            >;

            label = "NUM";
        };

        sym_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "SYM";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     !     ┃     @     ┃     #     ┃     $     ┃     %     ┃   ┃     ˆ     ┃     &     ┃     Ü     ┃     '     ┃     "     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     Ä     ┃           ┃    SZ     ┃           ┃           ┃   ┃   MUTE    ┃   YEN     ┃   EURO    ┃  POUND    ┃     Ö     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃  EMAIL1   ┃  EMAIL2   ┃           ┃           ┃           ┃   ┃   VOL-    ┃   VOL+    ┃   LAST    ┃   NEXT    ┃     \     ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃    GIF    ┃    ADJ    ┃   ┃           ┃           ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
            &kp LEFT_BRACE          &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE    &kp HOME       &kp END    &kp PRINTSCREEN  &kp SCROLLLOCK  &kp PAUSE_BREAK
            &hm LWIN DOUBLE_QUOTES  &hm LALT DOLLAR  &hm LSHIFT PERCENT    &hm LCTRL CARET        &kp PLUS           &kp PG_UP      &mkp LCLK  &kp UP           &mkp RCLK       &msc SCRL_UP
&kp LSHIFT  &kp TILDE               &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &kp PIPE           &kp PAGE_DOWN  &kp LEFT   &kp DOWN         &kp RIGHT       &msc SCRL_DOWN   &kp RSHIFT
                                                     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE     &trans         &trans     &trans
            >;
        };

        mouse_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "MSE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃   RESET   ┃ BT CLEAR  ┃  OUT TOG  ┃           ┃           ┃   ┃           ┃    F7     ┃    F8     ┃    F9     ┃    F12    ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃ BOOTLOAD  ┃ BT NEXT   ┃           ┃           ┃           ┃   ┃           ┃    F4     ┃    F5     ┃    F6     ┃    F11    ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃           ┃ BT PREV   ┃           ┃           ┃           ┃   ┃           ┃    F1     ┃    F2     ┃    F3     ┃    F10    ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃           ┃           ┃   ┃           ┃           ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
              &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR        &kp LC(Y)  &kp LC(V)       &kp LC(C)       &kp LC(X)     &kp LC(Z)
              &kp LWIN      &kp LALT      &kp LSHIFT    &kp LCTRL     &bt BT_CLR_ALL    &mkp MB4   &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT
&out OUT_TOG  &kp LC(Z)     &kp LC(X)     &kp LC(C)     &kp LC(V)     &kp LC(Y)         &mkp MB5   &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &bootloader
                                          &reset        &trans        &trans            &mkp LCLK  &mkp RCLK       &mkp MCLK
            >;
        };
    };
};
